#include "tokens.h"

// Standard Tokens are any token that can be used anywhere in the line.
struct Token StandardTokens[] = {
	/** CONTROL page of PROGRAM EDITOR (press PRGM when EDITING a program) **/
	{ LOGIC_IF,			"If "		},
	{ LOGIC_THEN,		"Then"		},
	{ LOGIC_ELSE,		"Else"		},
	{ CTL_FOR,			"For("		},
	{ CTL_WHILE,		"While "	},
	{ CTL_REPEAT,		"Repeat "	},
	{ CTL_END,			"End"		},
	{ CTL_PAUSE,		"Pause "	},
	{ CTL_PAUSE,		"Pause"		},
	{ LABEL,			"Lbl "		},
	{ CTL_GOTO,			"Goto "		},
	{ INCSKIPIFHIGH,	"IS>("		},
	{ DECSKIPIFLOW,		"DS<("		},
	{ MENU,				"Menu("		},
	{ PROGRAM,			"prgm"		},
	{ CTL_RETURN,		"Return"	},
	{ CTL_STOP,			"Stop"		},

	/** I/O page **/
	{ INPUT,			"Input "	},
	{ PROMPT,			"Prompt "	},
	{ DISP,				"Disp "		},
	{ DISPGRAPH,		"DispGraph"	},
	{ DISPTABLE,		"DispTable"	},
	{ OUTPUT,			"Output("	},
	{ GETKEY,			"getKey"	},
	{ CLRHOME,			"ClrHome"	},
	{ CLRTABLE,			"ClrTable"	},

	/** GetCalc **/
	{ GET,				"Get("		},
	{ SEND,				"Send("		},

    /** Plots **/
    { PLOTSON,          "PlotsOn "  },
    { PLOTSOFF,         "PlotsOff " },

	/** Others **/
	{ TRACE,			"Trace"		},
	{ ZSTANDARD,		"ZStandard"	},
	{ ZTRIG,			"ZTrig"		},
	{ ZBOX,				"ZBox"		},
	{ ZOOMIN,			"ZoomIn"	},
	{ ZOOMOUT,			"ZoomOut"	},
	{ ZSQUARE,			"ZSquare"	},
	{ ZINTEGER,			"ZInteger"	},
	{ ZPREVIOUS,		"ZPrevious"	},
	{ ZDECIMAL,			"ZDecimal"	},
	{ ZOOMSTAT,			"ZoomStat"	},
	{ ZOOMRCL,			"ZoomRcl"	},
	{ ZOOMSTO,			"ZoomSto"	},
	{ TEXTFUNC,			"Text("		},
	{ STOREPIC,			"StorePic"	},
	{ RECALLPIC,		"RecallPic"	},
	{ STOREGDB,			"StoreGDB"	},

	/** OTHERS **/
	{ TO_DMS,			"->DMS"			},
	{ TO_DEC,			"->DEC"			},
	{ TO_FRAC,			"->FRAC"		},
	{ STORE,			"->"			},
	{ BOXPLOT,			"BoxPlot"		},
	{ RADIANS,			"[radians]"		},
	{ DEGREES,			"[degrees]"		},
	{ INVERSE,			"^-1"			},
	{ SQUARE,			"^2"			},
	{ TRANSPOSE,		"[transpose]"	},
	{ CUBE,				"^3"			},
	{ ROUND,			"round("		},
	{ PXLTEST,			"pxl-Test("		},
	{ AUGMENT,			"augment("		},
	{ ROWSWAP,			"RowSwap("		},
	{ ROWPLUS,			"row+("			},
	{ STARROW,			"*row("			},
	{ STARROWPLUS,		"*row+("		},
	{ MAX,				"max("			},
	{ MIN,				"min("			},
	{ MEDIAN,			"median("		},
	{ RANDM,			"randM("		},
	{ MEAN,				"mean("			},
	{ SOLVE,			"solve("		},
	{ SEQFUNC,			"seq("			},
	{ FNINT,			"fnInt("		},
	{ NDERIV,			"NDeriv("		},
	{ FMIN,				"FMin("			},
	{ FMAX,				"FMax("			},
	{ CUBICREG,			"CubicReg "		},
	{ QUARTREG,			"QuartReg "		},
	{ LOGIC_OR,			" or "			},
	{ LOGIC_XOR,		" xor "			},
	{ LOGIC_AND,		"and"			},
	{ STR_THETA,		"[theta]"		},
	{ PROGRAM,			"prgm"			},
	{ RADIAN,			"Radian"		},
	{ DEGREE,			"Degree"		},
	{ NORMAL,			"Normal"		},
	{ SCI,				"Sci"			},
	{ ENG,				"Eng"			},
	{ FLOAT,			"Float"			},
	{ TEST_LOREQU,		"<="			},
	{ TEST_GOREQU,		">="			},
	{ TEST_NOTEQUAL,	"!="			},
	{ ANSWER,			"Ans"			},
	{ FIX,				"Fix "			},
	{ HORIZ,			"Horiz"			},
	{ FULL,				"Full"			},
	{ FUNC,				"Func"			},
	{ PARAM,			"Param"			},
	{ POLAR,			"Polar"			},
	{ SEQ,				"Seq"			},
	{ INDPNTAUTO,		"IndpntAuto"	},
	{ INDPNTASK,		"IndpntAsk"		},
	{ DEPENDAUTO,		"DependAuto"	},
	{ DEPENDASK,		"DependAsk"		},
	{ BOX,				"[box]"			},
	{ DOT,				"[dot]"			},
	{ TRACE,			"Trace"			},
	{ CLRDRAW,			"ClrDraw"		},
	{ ZSTANDARD,		"ZStandard"		},
	{ ZTRIG,			"ZTrig"			},
	{ ZBOX,				"ZBox"			},
	{ ZOOMIN,			"Zoom In"		},
	{ ZOOMOUT,			"Zoom Out"		},
	{ ZSQUARE,			"ZSquare"		},
	{ ZINTEGER,			"ZInteger"		},
	{ ZPREVIOUS,		"ZPrevious"		},
	{ ZDECIMAL,			"ZDecimal"		},
	{ ZOOMSTAT,			"ZoomStat"		},
	{ ZOOMRCL,			"ZoomRcl"		},
	{ PRINTSCREEN,		"PrintScreen"	},
	{ ZOOMSTO,			"ZoomSto"		},
	{ TEXTFUNC,			"Text("			},
	{ NPR,				"nPr"			},
	{ NCR,				"nCr"			},
	{ FNON,				"FnOn "			},
	{ FNOFF,			"FnOff "		},
	{ STOREPIC,			"StorePic "		},
	{ RECALLPIC,		"RecallPic "	},
	{ STOREGDB,			"StoreGDB "		},
	{ RECALLGDB,		"RecallGDB "	},
	{ LINE,				"Line("			},
	{ VERTICAL,			"Vertical "		},
	{ PTON,				"Pt-On("		},
	{ PTOFF,			"Pt-Off("		},
	{ PTCHANGE,			"Pt-Change("	},
	{ PXLON,			"Pxl-On("		},
	{ PXLOFF,			"Pxl-Off("		},
	{ PXLCHANGE,		"Pxl-Change("	},
	{ SHADE,			"Shade("		},
	{ CIRCLE,			"Circle("		},
	{ HORIZONTAL,		"Horizontal "	},
	{ TANGENT,			"Tangent("		},
	{ DRAWINV,			"DrawInv "		},
	{ DRAWF,			"DrawF "		},
	{ PI,				"[pi]"			},
	{ GETKEY,			"getKey"		},
	{ NEGATIVE,			"[neg]"			},
	{ CONV_INT,			"int("			},
	{ ABS,				"abs("			},
	{ DETERMINANT,		"det("			},
	{ IDENTITY,			"identity("		},
	{ DIM,				"dim("			},
	{ SUM,				"sum("			},
	{ PROD,				"prod("			},
	{ NOT,				"not("			},
	{ IPART,			"iPart("		},
	{ FPART,			"fPart("		},
	{ SQR_ROOT,			"[root]^2"		},
	{ CUBE_ROOT,		"[root]^3"		},
	{ NATLOG,			"ln("			},
	{ ETOPOWER,			"e^"			},
	{ LOGARITHM,		"log("			},
	{ POWER10,			"10^("			},
	{ SINE,				"sin("			},
	{ INVSIN,			"asin("			},
	{ COSINE,			"cos("			},
	{ INVCOSINE,		"acos("			},
	{ TANGENT_TRIG,		"tan("			},
	{ INVTANGENT,		"atan("			},
	{ HYP_SINE,			"sinh("			},
	{ HYP_ISINE,		"asinh("		},
	{ HYP_COSINE,		"cosh("			},
	{ HYP_ICOSINE,		"acosh("		},
	{ HYP_TANGENT,		"tanh("			},
	{ HYP_ITANGENT,		"atanh("		},
	{ LOGIC_ELSE,		"Else"			},
	{ FILL,				"Fill("			},
	{ SORTA,			"SortA("		},
	{ SORTD,			"SortD("		},
	{ LIST,				"[list]"		},
	{ PLOT1,			"Plot1("		},
	{ PLOT2,			"Plot2("		},
	{ PLOT3,			"Plot3("		},
	{ XTHROOT,			"[root]^"		},
	{ VARSTATS_1,		"1-Var Stats "	},
	{ VARSTATS_2,		"2-Var Stats "	},
	{ LINREG1,			"LinReg(a+bx) "	},
	{ EXPREG,			"ExpReg "		},
	{ LNREG,			"LnReg "		},
	{ PWRREG,			"PwrReg "		},
	{ MEDMED,			"Med-Med "		},
	{ QUADREG,			"QuadReg "		},
	{ CLRLIST,			"ClrList "		},
	{ CLRTABLE,			"ClrTable"		},
	{ HISTOGRAM,		"Histogram"		},
	{ XYLINE,			"xyLine"		},
	{ SCATTER,			"Scatter"		},
	{ LINREG2,			"LinReg(ax+b) "	},
	{ RAND,				"rand"			},
};

// two-byte variables
struct TwoByte CalcVars[] = {
	// AsmPrgm (uncompiled)
	{ 0x6CBB,			"AsmPrgm"	},
	{ 0x6DBB,			"AsmPrgm"	}, // this means decompilation works, but compilation won't hit this

	// SysVar
	{ MAT_A,			"[A]"		},
	{ MAT_B,			"[B]"		},
	{ MAT_C,			"[C]"		},
	{ MAT_D,			"[D]"		},
	{ MAT_E,			"[E]"		},
	{ MAT_F,			"[F]"		},
	{ MAT_G,			"[G]"		},
	{ MAT_H,			"[H]"		},
	{ MAT_I,			"[I]"		},
	{ MAT_J,			"[J]"		},
	{ L1,				"L1"		},
	{ L2,				"L2"		},
	{ L3,				"L3"		},
	{ L4,				"L4"		},
	{ L5,				"L5"		},
	{ L6,				"L6"		},
	{ L7,				"L7"		},
	{ L8,				"L8"		},
	{ L9,				"L9"		},
	{ L0,				"L0"		},
	{ Y1,				"Y1"		},
	{ Y2,				"Y2"		},
	{ Y3,				"Y3"		},
	{ Y4,				"Y4"		},
	{ Y5,				"Y5"		},
	{ Y6,				"Y6"		},
	{ Y7,				"Y7"		},
	{ Y8,				"Y8"		},
	{ Y9,				"Y9"		},
	{ Y0,				"Y0"		},
	{ X1T,				"X1T"		},
	{ Y1T,				"Y1T"		},
	{ X2T,				"X2T"		},
	{ Y2T,				"Y2T"		},
	{ X3T,				"X3T"		},
	{ Y3T,				"Y3T"		},
	{ X4T,				"X4T"		},
	{ Y4T,				"Y4T"		},
	{ X5T,				"X5T"		},
	{ Y5T,				"Y5T"		},
	{ X6T,				"X6T"		},
	{ Y6T,				"Y6T"		},
	{ R1,				"R1"		},
	{ R2,				"R2"		},
	{ R3,				"R3"		},
	{ R4,				"R4"		},
	{ R5,				"R5"		},
	{ R6,				"R6"		},
	{ SYSVAR_U,			"[u]"		},
	{ SYSVAR_V,			"[v]"		},
	{ PIC1,				"PIC1"		},
	{ PIC2,				"PIC2"		},
	{ PIC3,				"PIC3"		},
	{ PIC4,				"PIC4"		},
	{ PIC5,				"PIC5"		},
	{ PIC6,				"PIC6"		},
	{ PIC7,				"PIC7"		},
	{ PIC8,				"PIC8"		},
	{ PIC9,				"PIC9"		},
	{ PIC0,				"PIC0"		},
	{ GDB1,				"GDB1"		},
	{ GDB2,				"GDB2"		},
	{ GDB3,				"GDB3"		},
	{ GDB4,				"GDB4"		},
	{ GDB5,				"GDB5"		},
	{ GDB6,				"GDB6"		},
	{ GDB7,				"GDB7"		},
	{ GDB8,				"GDB8"		},
	{ GDB9,				"GDB9"		},
	{ GDB0,				"GDB0"		},
	// finally, StatVars
	{ SX1,				"Sx1"		},
	{ SX2,				"Sx2"		},
	{ SXP,				"Sxp"		},
	{ REGEQ,			"RegEq"		},
	{ STAT_N,			"[n]"		},
	{ MEANX,			"mean(x)"	},
	{ SUMXSQUARED,		"sum(x)^2"	},
	{ SUMX,				"sum(x)"	},
	{ SX,				"Sx"		},
	{ SIGMAX,			"[sigma]x"	},
	{ MINX,				"minX"		},
	{ MAXX,				"maxX"		},
	{ MINY,				"minY"		},
	{ MAXY,				"maxY"		},
	{ MEANY,			"mean(y)"	},
	{ SUMYSQUARED,		"sum(y)^2"	},
	{ SUMY,				"sum(y)"	},
	{ SY,				"Sy"		},
	{ SIGMAY,			"[sigma]y"	},
	{ SUMXY,			"sum(xy)"	},
	{ SYSVAR_R,			"[r]"		},
	{ MED,				"Med"		},
	{ Q1,				"Q1"		},
	{ Q3,				"Q3"		},
	{ SYSVAR_A,			"[a]"		},
	{ SYSVAR_B,			"[b]"		},
	{ SYSVAR_C,			"[c]"		},
	{ SYSVAR_D,			"[d]"		},
	{ SYSVAR_E,			"[stat_e]"	}, // because '[e]' refers to the constant e
	{ X1,				"x1"		},
	{ X2,				"x2"		},
	{ X3,				"x3"		},
	{ Y1_1,				"y1"		},
	{ Y2_1,				"y2"		},
	{ Y3_1,				"y3"		},
	{ SYSVAR_N,			"[n]"		}, // somebody please tell me why there are so many variations on n
	{ SYSVAR_P,			"[p]"		},
	{ SYSVAR_Z,			"[z]"		},
	{ SYSVAR_T,			"[t]"		},
	{ CHISQUARED,		"[chi]^2"	},
	{ FIN,				"[fin]"		},
	{ DF,				"[df]"		},
	{ PHAT,				"[p^]"		},
	{ PHAT1,			"[p^1]"		},
	{ PHAT2,			"[p^2]"		},
	{ MEANX1,			"mean(x1)"	},
	{ N1,				"[n1]"		},
	{ MEANX2,			"mean(x2)"	},
	{ N2,				"[n2]"		},
	{ LOWER,			"[lower]"	},
	{ UPPER,			"[upper]"	},
	{ SYSVAR_S,			"[s]"		},
	{ RSQUARED,			"r^2"		},
	{ CAPRSQUARED,		"R^2"		},
	{ DF2,				"[df]"		}, // somebody was high when they invented the token tables
	{ SS,				"SS"		},
	{ DF3,				"[df]"		}, // see previous comment
	{ SS1,				"SS"		}, // again...
	{ MS1,				"MS"		}, // and again!
	// graph data
	{ ZXSCL,			"ZXscl"		},
	{ ZYSCL,			"ZYscl"		},
	{ XSCL,				"Xscl"		},
	{ YSCL,				"Yscl"		},
	{ ZUNSTART,			"ZUnStart"	},
	{ ZVNSTART,			"ZVnStart"	},
	{ UNSTART,			"UnStart"	},
	{ VNSTART,			"VnStart"	},
	{ UNINVERSE,		"Un-1"		}, // i read a ^-1, but it's actually a -1...
	{ VNINVERSE,		"Vn-1"		}, // same as above
	{ ZXMIN,			"ZXmin"		},
	{ ZXMAX,			"ZXmax"		},
	{ ZYMIN,			"ZYmin"		},
	{ ZYMAX,			"ZYmax"		},
	{ ZTHETAMIN,		"Ztheta_min"},
	{ ZTHETAMAX,		"Ztheta_max"},
	{ ZTMIN,			"ZTmin"		},
	{ ZTMAX,			"ZTmax"		},
	{ XMIN,				"Xmin"		},
	{ XMAX,				"Xmax"		},
	{ YMIN,				"Ymin"		},
	{ YMAX,				"Ymax"		},
	{ TMIN,				"Tmin"		},
	{ TMAX,				"Tmax"		},
	{ THETAMIN,			"theta_min"	},
	{ THETAMAX,			"theta_max"	},
	{ TBLMIN,			"TblMin"	},
	{ ZNMIN,			"ZnMin"		},
	{ NMIN,				"nMin"		},
	{ ZNMAX,			"ZnMax"		},
	{ NMAX,				"nMax"		},
	{ ZNSTART,			"ZnStart"	},
	{ NSTART,			"nStart"	},
	{ DELTATABLE,		"delta_Tbl"	},
	{ ZTSTEP,			"ZTstep"	},
	{ ZTHETASTEP,		"Ztheta_step"},
	{ TSTEP,			"Tstep"		},
	{ THETASTEP,		"theta_step"},
	{ DELTAX,			"delta_X"	},
	{ DELTAY,			"delta_Y"	},
	{ XFACT,			"XFact"		},
	{ YFACT,			"YFact"		},
	{ TBLINPUT,			"TblInput"	},
	// finance app
	{ SYSVAR_CAPN,		"[N]"		}, // this is the N in the Finance app
	{ IPERCENT,			"I%"		},
	{ PV,				"PV"		},
	{ PMT,				"PMT"		},
	{ FV,				"FV"		},
	{ ZXRES,			"ZXres"		},
	{ XRES,				"Xres"		},
	// strings
	{ STR1,				"STR1"		},
	{ STR2,				"STR2"		},
	{ STR3,				"STR3"		},
	{ STR4,				"STR4"		},
	{ STR5,				"STR5"		},
	{ STR6,				"STR6"		},
	{ STR7,				"STR7"		},
	{ STR8,				"STR8"		},
	{ STR9,				"STR9"		},
	{ STR0,				"STR0"		},
	// 7E Variables
	{ SEQ,				"Sequential"	},
	{ SIMUL,			"Simul"			},
	{ POLARGC,			"PolarGC"		},
	{ RECTGC,			"RectGC"		},
	{ COORDON,			"CoordOn"		},
	{ COORDOFF,			"CoordOff"		},
	{ CONNECTED,		"Connected"		},
	{ DOT_7E,			"Dot"			},
	{ AXESON,			"AxesOn"		},
	{ AXESOFF,			"AxesOff"		},
	{ GRIDON,			"GridOn"		},
	{ GRIDOFF,			"GridOff"		},
	{ LABELON,			"LabelOn"		},
	{ LABELOFF,			"LabelOff"		},
	{ WEB,				"Web"			},
	{ TIME,				"Time"			},
	{ UVAXES,			"uvAxes"		},
	{ VWAXES,			"vwAxes"		},
	{ UWAXES,			"uwAxes"		},
	// BB Variables
	{ NPV,				"npv("			},
	{ IRR,				"irr("			},
	{ BAL,				"bal("			},
	{ SUMPRN,			"sum_prn("		},
	{ SUMINT,			"sum_int("		},
	{ TONOM,			"->Nom"			},
	{ TOEFF,			"->Eff"			},
	{ DBD,				"dbd("			},
	{ LCM,				"lcm("			},
	{ GCD,				"gcd("			},
	{ RANDINT,			"RandInt("		},
	{ RANDBIN,			"RandBin("		},
	{ SUB,				"sub("			},
	{ STDDEV,			"StdDev("		},
	{ VARIANCE,			"variance("		},
	{ INSTRING,			"inString("		},
	{ NORMALCDF,		"normalcdf("	},
	{ INVNORM,			"invNorm("		},
	{ TCDF,				"tcdf("			},
	{ XSQUCDF,			"x^2cdf("		},
	{ FCDF,				"fcdf("			},
	{ BINOMPDF,			"binompdf("		},
	{ BINOMCDF,			"binomcdf("		},
	{ POISSONPDF,		"poissonpdf("	},
	{ POISSONCDF,		"poissoncdf("	},
	{ GEOMETPDF,		"geometpdf("	},
	{ GEOMETCDF,		"geometcdf("	},
	{ NORMALPDF,		"normalpdf("	},
	{ TPDF,				"tpdf("			},
	{ XSQUPDF,			"x^2pdf("		},
	{ FPDF,				"fpdf("			},
	{ RANDNORM,			"RandNorm("		},
	{ TVM_PMT,			"tvm_pmt"		},
	{ TVM_I_PERCENT,	"tvm_i%"		},
	{ TVM_PV,			"tvm_PV"		},
	{ TVM_N,			"tvm_N"			},
	{ TVM_FV,			"tvm_FV"		},
	{ CONJ,				"conj("			},
	{ REAL,				"real("			},
	{ IMAG,				"imag("			},
	{ ANGLE,			"angle("		},
	{ CUMSUM,			"cumSum("		},
	{ EXPR,				"expr("			},
	{ LENGTH,			"length("		},
	{ DELTA_LIST,		"delta_List("	},
	{ REF,				"ref("			},
	{ RREF,				"rref("			},
	{ TORECT,			"->Rect"		},
	{ TOPOLAR,			"->Polar"		},
	{ VAR_E,			"[e]"			}, // e by itself is impossible, and dangerous (imagine Disp "Hello"!)
	{ SINREG,			"SinReg "		},
	{ LOGISTIC,			"Logistic "		},
	{ LINREGTTEST,		"LinRegTTest "	},
	{ SHADENORM,		"ShadeNorm("	},
	{ SHADE_T,			"Shade_t("		},
	{ SHADEXSQU,		"Shade_x^2("	},
	{ SHADEF,			"ShadeF("		},
	{ MATRTOLIST,		"Matr->list"	},
	{ LISTTOMATR,		"List->matr"	},
	{ ZTEST,			"Z-Test("		},
	{ TTEST,			"T-Test "		},
	{ TWO_SAMPZTEST,	"2-SampZTest("	},
	{ ONE_PROPZTEST,	"1-PropZTest("	},
	{ TWO_PROPZTEST,	"2-PropZTest("	},
	{ XSQUTEST,			"x^2_test("		},
	{ ZINTERVAL,		"ZInterval"		},
	{ TWO_SAMPZINT,		"2-SampZInt("	},
	{ ONE_PROPZINT,		"1-PropZInt("	},
	{ TWO_PROPZINT,		"2-PropZInt("	},
	{ GRAPHSTYLE,		"GraphStyle("	},
	{ TWO_SAMPTTEST,	"2-SampTTest "	},
	{ TWO_SAMPFTEST,	"2-SampFTest_"	},
	{ TINTERVAL,		"TInterval "	},
	{ TWO_SAMPTINT,		"2-SampTInt "	},
	{ SETUPEDITOR,		"SetUpEditor "	},
	{ PMT_END,			"PMT_End"		},
	{ PMT_BGN,			"PMT_Bgn"		},
	{ REAL_BB,			"Real"			},
	{ REPOWTHETAI,		"re^[theta]i"	},
	{ APLUSBI,			"a+bi"			},
	{ EXPRON,			"ExprOn"		},
	{ EXPROFF,			"ExprOff"		},
	{ CLRALLLISTS,		"ClrAllLists"	},
	{ GETCALC,			"GetCalc("		},
	{ DELVAR,			"DelVar "		},
	{ EQUTOSTRING,		"Equ->String("	},
	{ STRINGTOEQU,		"String->Equ("	},
	{ CLEARENTRIES,		"Clear Entries"	},
	{ SELECT,			"Select("		},
	{ ANOVA,			"ANOVA("		},
	{ MODBOXPLOT,		"ModBoxPlot"	},
	{ NORMPROBPLOT,		"NormProbPlot"	},
};

